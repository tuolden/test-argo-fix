apiVersion: apps/v1
kind: Deployment
metadata:
  name: "test-argo-fix"
  namespace: "test-argo-fix"
  labels:
    app: "testargofix"
    version: v1
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: "testargofix"
  template:
    metadata:
      labels:
        app: "testargofix"
        version: v1
      annotations:
        argocd.argoproj.io/tracking-id: "test_argo_fix:apps/Deployment:test_argo_fix/test_argo_fix"
    spec:
      containers:
      - name: "testargofix"
        image: "ghcr.io/tuolden/test-argo-fix:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PROJECT_NAME
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: PROJECT_NAME
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: LOG_LEVEL
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: PORT
        - name: API_V1_STR
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: API_V1_STR
        - name: DATABASE_POOL_SIZE
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: DATABASE_POOL_SIZE
        - name: DATABASE_MAX_OVERFLOW
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: DATABASE_MAX_OVERFLOW
        - name: ACCESS_TOKEN_EXPIRE_MINUTES
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: ACCESS_TOKEN_EXPIRE_MINUTES
        - name: ALLOWED_HOSTS
          valueFrom:
            configMapKeyRef:
              name: "test-argo-fix-config"
              key: ALLOWED_HOSTS
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: "test-argo-fix-secret"
              key: DATABASE_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "test-argo-fix-secret"
              key: SECRET_KEY
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: "test-argo-fix-secret"
              key: REDIS_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 10000
